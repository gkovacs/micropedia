// Generated by LiveScript 1.3.1
(function(){
  var express, fs, glob, marked, LiveScript, jsonfile, $, app, ref$, listproblems, listproblems_markdown, listproblems_html, page_markdown, page_html, cards, mkexercise, mktitlepage;
  express = require('express');
  fs = require('fs');
  glob = require('glob');
  marked = require('marked');
  LiveScript = require('LiveScript');
  jsonfile = require('jsonfile');
  $ = require('cheerio');
  app = express();
  app.set('view engine', 'jade');
  app.set('views', __dirname + '/static');
  app.use(express['static'](__dirname + '/static'));
  app.listen((ref$ = process.env.PORT) != null ? ref$ : 3000);
  app.get('/feed', function(req, res){
    return res.render('feed', {});
  });
  app.get('/', function(req, res){
    return res.render('feed', {});
  });
  app.get('/w', function(req, res){
    return res.redirect('/w/index');
  });
  app.get('/wiki', function(req, res){
    return res.redirect('/w/index');
  });
  listproblems = function(topic, callback){
    return glob('w/' + topic + '/*-problem.md', function(err, files){
      var res$, i$, len$, x;
      res$ = [];
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        x = files[i$];
        res$.push(x.substring(x.lastIndexOf('/') + 1));
      }
      files = res$;
      res$ = [];
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        x = files[i$];
        res$.push(x.substring(0, x.length - 3));
      }
      files = res$;
      return callback(files);
    });
  };
  app.get('/listproblems', function(req, res){
    return listproblems(function(files){
      return res.send(JSON.stringify(files));
    });
  });
  listproblems_markdown = function(topic, callback){
    return listproblems(topic, function(files){
      var output, i$, len$, fn;
      output = [];
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        fn = files[i$];
        output.push("[" + fn + "](" + fn + ")");
      }
      return callback(output.join('\n\n'));
    });
  };
  listproblems_html = function(topic, callback){
    return listproblems_markdown(topic, function(mdata){
      return callback(marked(mdata));
    });
  };
  app.get('/markdown/problems', function(req, res){
    var topic, ref$;
    topic = (ref$ = req.query.topic) != null ? ref$ : '**';
    return listproblems_markdown(topic, function(output){
      res.type('text/plain');
      return res.send(output);
    });
  });
  app.get('/w/problems', function(req, res){
    var topic, ref$;
    topic = (ref$ = req.query.topic) != null ? ref$ : '**';
    return listproblems_html(topic, function(output){
      res.type('text/html');
      return res.send(output);
    });
  });
  page_markdown = function(name, callback){
    var pattern, matches, filepath, contents;
    pattern = 'w/**/' + name + '.md';
    matches = glob.sync(pattern);
    if (matches.length === 0) {
      callback(null);
      return;
    }
    filepath = matches[0];
    contents = fs.readFileSync(filepath, 'utf8');
    return callback(contents);
  };
  page_html = function(name, callback){
    return page_markdown(name, function(mdata){
      if (mdata === null) {
        return callback(null);
      } else {
        return callback(marked(mdata));
      }
    });
  };
  app.get(/^\/w\/(.+)/, function(req, res){
    var name;
    name = req.params[0];
    return page_html(name, function(data){
      res.type('text/html');
      if (data === null) {
        return res.send('article does not exist: ' + name);
      } else {
        return res.send(data);
      }
    });
  });
  cards = jsonfile.readFileSync('cards.json');
  mkexercise = function(sentence){
    var card, parent, engsub, translation, children, idx, pinyin, output, child_links, i$, len$, child, childcard, prevcard, nextcard;
    card = cards.filter(function(x){
      return x.sentence === sentence;
    })[0];
    sentence = card.sentence, parent = card.parent, engsub = card.engsub, translation = card.translation, children = card.children, idx = card.idx, pinyin = card.pinyin;
    output = [];
    if (children != null) {
      child_links = [];
      for (i$ = 0, len$ = children.length; i$ < len$; ++i$) {
        child = children[i$];
        childcard = cards.filter(fn$)[0];
        child_links.push($('<a>').text(child).addClass('codelink').attr({
          href: 'zh-' + child,
          title: childcard.translation
        }));
      }
      output.push(child_links.join(' '));
    } else {
      output.push(sentence);
    }
    output.push('Try translating the above to English: <input type="text"></input>');
    if (pinyin != null) {
      output.push('Pinyin: ' + pinyin);
    }
    if (engsub != null) {
      output.push('English Subtitle: ' + engsub);
    }
    output.push('Google Translate: ' + translation);
    if (parent != null) {
      output.push("Parent: [" + parent + "}](zh-" + parent + ")");
    }
    if (idx != null) {
      prevcard = cards.filter(function(x){
        return x.idx === idx - 1;
      })[0];
      nextcard = cards.filter(function(x){
        return x.idx === idx + 1;
      })[0];
      if (prevcard != null) {
        output.push(("Prev line (" + (idx - 1) + "): ") + $('<a>').text(prevcard.sentence).attr({
          href: 'zh-' + prevcard.sentence,
          title: prevcard.engsub
        }));
      }
      if (nextcard != null) {
        output.push(("Next line (" + (idx + 1) + "): ") + $('<a>').text(nextcard.sentence).attr({
          href: 'zh-' + nextcard.sentence,
          title: nextcard.engsub
        }));
      }
    }
    return output.join('\n\n');
    function fn$(x){
      return x.sentence === child;
    }
  };
  mktitlepage = function(){
    var output, i$, ref$, len$, card, sentence;
    output = [];
    for (i$ = 0, len$ = (ref$ = cards.filter(fn$).sort(fn1$)).length; i$ < len$; ++i$) {
      card = ref$[i$];
      sentence = card.sentence;
      output.push("[" + sentence + "](zh-" + sentence + ")");
    }
    return output.join('\n\n');
    function fn$(x){
      return x.idx != null;
    }
    function fn1$(a, b){
      return a.idx - b.idx;
    }
  };
  app.get(/^\/markdown\/zh-(.+)/, function(req, res){
    var sentence;
    sentence = req.params[0];
    res.type('text/plain');
    return res.send(mkexercise(sentence));
  });
  app.get('/markdown/srt', function(req, res){
    res.type('text/plain');
    return res.send(mktitlepage());
  });
  app.get(/^\/markdown\/(.+)/, function(req, res){
    var name;
    name = req.params[0];
    return page_markdown(name, function(data){
      res.type('text/plain');
      if (data === null) {
        return res.send('article does not exist: ' + name);
      } else {
        return res.send(data);
      }
    });
  });
  app.get(/^\/metadata\/(.+)/, function(req, res){
    var filename, pattern, matches, filepath;
    filename = req.params[0];
    pattern = 'w/**/' + filename + '.yaml';
    matches = glob.sync(pattern);
    if (matches.length === 0) {
      res.send('metadata does not exist: ' + filename);
      return;
    }
    filepath = matches[0];
    return res.sendFile(filepath, {
      root: __dirname
    });
  });
  app.get(/^\/png\/(.+)/, function(req, res){
    var filename, pattern, matches, filepath;
    filename = req.params[0];
    pattern = 'w/**/' + filename + '.png';
    matches = glob.sync(pattern);
    if (matches.length === 0) {
      res.send('png does not exist: ' + filename);
      return;
    }
    filepath = matches[0];
    return res.sendFile(filepath, {
      root: __dirname
    });
  });
  app.get(/^\/js\/(.+)/, function(req, res){
    var filename, pattern, matches, filepath;
    filename = req.params[0];
    pattern = 'w/**/' + filename + '.js';
    matches = glob.sync(pattern);
    if (matches.length === 0) {
      res.send('js does not exist: ' + filename);
      return;
    }
    filepath = matches[0];
    return res.sendFile(filepath, {
      root: __dirname
    });
  });
  app.get(/^\/ls\/(.+)/, function(req, res){
    var filename, pattern, matches, filepath;
    filename = req.params[0];
    pattern = 'w/**/' + filename + '.ls';
    matches = glob.sync(pattern);
    if (matches.length === 0) {
      res.send('ls does not exist: ' + filename);
      return;
    }
    filepath = matches[0];
    return res.sendFile(filepath, {
      root: __dirname
    });
  });
  app.get(/^\/lsc\/(.+)/, function(req, res){
    var filename, pattern, matches, filepath, contents;
    filename = req.params[0];
    pattern = 'w/**/' + filename + '.ls';
    matches = glob.sync(pattern);
    if (matches.length === 0) {
      res.send('ls does not exist: ' + filename);
      return;
    }
    filepath = matches[0];
    contents = fs.readFileSync(filepath, 'utf8');
    res.type('text/javascript');
    return res.send(LiveScript.compile(contents));
  });
}).call(this);
