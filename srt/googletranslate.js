// Generated by LiveScript 1.3.1
(function(){
  var root, http_get, redis, client, fs, querystring, escapeUnicodeEncoded, googleapikey, getTranslationsReal, getTranslations, lastPinyinFetchTimestamp, getTranslationsRateLimited, getTranslationsRateLimitedCached, main;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  http_get = require('http-get');
  redis = require('redis');
  client = redis.createClient();
  fs = require('fs');
  querystring = require('querystring');
  escapeUnicodeEncoded = function(text){
    return unescape(text.split('\\u').join('%u'));
  };
  googleapikey = fs.readFileSync('google_api_key.txt', 'utf-8').trim();
  getTranslationsReal = function(fromtext, fromlanguage, tolanguage, callback){
    var reqtxt;
    reqtxt = fromtext.split('"').join('');
    return http_get.get({
      'url': 'https://www.googleapis.com/language/translate/v2?' + querystring.stringify({
        'key': googleapikey,
        'source': fromlanguage,
        'target': tolanguage,
        'q': fromtext
      })
    }, function(err, dlData){
      var buffer, responseJSON, translations;
      buffer = dlData.buffer;
      responseJSON = JSON.parse(buffer);
      translations = responseJSON['data']['translations'];
      client.set('gtrans_' + fromlanguage + '_to_' + tolanguage + '_j5|' + reqtxt, JSON.stringify(translations));
      return callback(translations);
    });
  };
  getTranslations = root.getTranslations = function(fromtext, fromlanguage, tolanguage, callback){
    var reqtxt;
    reqtxt = fromtext.split('"').join('');
    return client.get('gtrans_' + fromlanguage + '_to_' + tolanguage + '_j5|' + reqtxt, function(err, reply){
      if (reply != null) {
        return callback(JSON.parse(reply));
      } else {
        return getTranslationsReal(fromtext, fromlanguage, tolanguage, callback);
      }
    });
  };
  lastPinyinFetchTimestamp = 0;
  getTranslationsRateLimited = function(fromtext, fromlanguage, tolanguage, callback){
    var timestamp, lastPinyinFetchTimestamp;
    timestamp = Math.round(new Date().getTime() / 1000);
    if (lastPinyinFetchTimestamp + 1 >= timestamp) {
      return setTimeout(function(){
        return getTranslationsRateLimited(fromtext, fromlanguage, tolanguage, callback);
      }, 250);
    } else {
      lastPinyinFetchTimestamp = timestamp;
      return getTranslationsReal(text, callback);
    }
  };
  getTranslationsRateLimitedCached = function(fromtext, fromlanguage, tolanguage, callback){
    return client.get('gtrans_' + fromlanguage + '_to_' + tolanguage + '_j5|' + text, function(err, reply){
      if (reply != null) {
        return callback(text, reply);
      } else {
        return getTranslationsRateLimited(text, callback);
      }
    });
  };
  main = function(){
    var text, ref$, fromlang, tolang;
    text = (ref$ = process.argv[2]) != null ? ref$ : '你好';
    fromlang = (ref$ = process.argv[3]) != null ? ref$ : 'zh';
    tolang = (ref$ = process.argv[4]) != null ? ref$ : 'en';
    return getTranslations(text, fromlang, tolang, function(translation){
      return console.log(translation[0].translatedText);
    });
  };
  if (require.main === module) {
    main();
  }
}).call(this);
