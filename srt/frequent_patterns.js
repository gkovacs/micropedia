// Generated by LiveScript 1.3.1
(function(){
  var jsonfile, parseSexp, lines_english, parse_trees, hasalphabetic, getGrammarPatterns, patterns_dict, i$, len$, idx, line, tree, patterns, j$, len1$, pattern;
  jsonfile = require('jsonfile');
  parseSexp = require('./parse_sexp').parseSexp;
  lines_english = jsonfile.readFileSync('tatoeba_eng.json');
  parse_trees = jsonfile.readFileSync('parse_trees_tatoeba_eng.json');
  hasalphabetic = function(s){
    var alpha, i$, len$, c;
    alpha = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"].concat(["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]);
    for (i$ = 0, len$ = s.length; i$ < len$; ++i$) {
      c = s[i$];
      if (alpha.indexOf(c) !== -1) {
        return true;
      }
    }
    return false;
  };
  getGrammarPatterns = function(s){
    var output, parsed, i$, ref$, len$, child, j$, ref1$, len1$, pattern;
    output = [];
    parsed = parseSexp(s);
    if (parsed.pos === '' && parsed.childrentree.length === 1) {
      return getGrammarPatterns(parsed.childrentree[0]);
    }
    output.push(parsed.childrenpos.filter(function(x){
      return x !== '.';
    }).join(' '));
    for (i$ = 0, len$ = (ref$ = parsed.childrentree).length; i$ < len$; ++i$) {
      child = ref$[i$];
      for (j$ = 0, len1$ = (ref1$ = getGrammarPatterns(child)).length; j$ < len1$; ++j$) {
        pattern = ref1$[j$];
        output.push(pattern);
      }
    }
    return output;
  };
  patterns_dict = {};
  for (i$ = 0, len$ = lines_english.length; i$ < len$; ++i$) {
    idx = i$;
    line = lines_english[i$];
    if (idx % 10000 === 0) {
      console.log(idx + ' / ' + lines_english.length);
    }
    tree = parse_trees[line];
    if (tree == null) {
      continue;
    }
    patterns = getGrammarPatterns(tree);
    for (j$ = 0, len1$ = patterns.length; j$ < len1$; ++j$) {
      pattern = patterns[j$];
      if (patterns_dict[pattern] == null) {
        patterns_dict[pattern] = 1;
      } else {
        patterns_dict[pattern] += 1;
      }
    }
  }
  jsonfile.writeFileSync('patterns_dict_tatoeba_eng.json', patterns_dict);
}).call(this);
