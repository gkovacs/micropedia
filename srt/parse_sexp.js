// Generated by LiveScript 1.3.1
(function(){
  var getPOS, initPropertiesTrue, parseSexp, listPOS, listText, out$ = typeof exports != 'undefined' && exports || this;
  getPOS = function(s){
    var output, num_leftparens, i$, len$, c;
    output = [];
    num_leftparens = 0;
    for (i$ = 0, len$ = s.length; i$ < len$; ++i$) {
      c = s[i$];
      if (c === '(') {
        num_leftparens += 1;
        continue;
      }
      if (c === ' ') {
        break;
      }
      if (num_leftparens === 1) {
        output.push(c);
      }
    }
    return output.join('');
  };
  initPropertiesTrue = function(options, properties){
    var i$, len$, property, results$ = [];
    for (i$ = 0, len$ = properties.length; i$ < len$; ++i$) {
      property = properties[i$];
      if (options[property] == null) {
        results$.push(options[property] = true);
      }
    }
    return results$;
  };
  out$.parseSexp = parseSexp = function(s, options){
    var output, depth, curchild, curnode, seen_space, i$, len$, c, childtree;
    if (options == null) {
      options = {};
    }
    initPropertiesTrue(options, ['childrentree', 'childrenpos', 'childrentext', 'textlist', 'poslist', 'pos', 'terminal', 'curtext']);
    output = {};
    if (options.childrentree) {
      output.childrentree = [];
    }
    if (options.childrenpos) {
      output.childrenpos = [];
    }
    if (options.childrentext) {
      output.childrentext = [];
    }
    depth = 0;
    curchild = [];
    curnode = [];
    seen_space = false;
    for (i$ = 0, len$ = s.length; i$ < len$; ++i$) {
      c = s[i$];
      if (c === '(') {
        depth += 1;
      } else if (c === ')') {
        depth -= 1;
        if (depth === 1) {
          curchild.push(c);
          childtree = curchild.join('');
          if (options.childrentree) {
            output.childrentree.push(childtree);
          }
          if (options.childrenpos) {
            output.childrenpos.push(getPOS(childtree));
          }
          if (options.childrentext) {
            output.childrentext.push(listText(childtree).join(' '));
          }
          curchild = [];
        }
      } else if (c === ' ') {
        seen_space = true;
      } else if (depth === 1 && seen_space) {
        curnode.push(c);
      }
      if (depth >= 2) {
        curchild.push(c);
      }
    }
    if (options.pos) {
      output.pos = getPOS(s);
    }
    if (options.terminal) {
      if (curnode.length > 0) {
        output.terminal = curnode.join('');
      }
    }
    if (options.poslist) {
      output.poslist = listPOS(s);
    }
    if (options.textlist) {
      output.textlist = listText(s);
    }
    if (options.curtext) {
      output.curtext = listText(s).join(' ');
    }
    return output;
  };
  listPOS = function(s){
    var output, ref$, childrentree, pos, terminal, i$, len$, child, j$, len1$;
    output = [];
    ref$ = parseSexp(s, {
      pos: true,
      terminal: true,
      curtext: false,
      childrentree: true,
      childrenpos: false,
      childrentext: false,
      textlist: false,
      poslist: false
    }), childrentree = ref$.childrentree, pos = ref$.pos, terminal = ref$.terminal;
    if (terminal != null) {
      output.push(pos);
    }
    for (i$ = 0, len$ = childrentree.length; i$ < len$; ++i$) {
      child = childrentree[i$];
      for (j$ = 0, len1$ = (ref$ = listPOS(child)).length; j$ < len1$; ++j$) {
        pos = ref$[j$];
        output.push(pos);
      }
    }
    return output;
  };
  listText = function(s){
    var output, ref$, childrentree, pos, terminal, i$, len$, child, j$, len1$;
    output = [];
    ref$ = parseSexp(s, {
      pos: true,
      terminal: true,
      curtext: false,
      childrentree: true,
      childrenpos: false,
      childrentext: false,
      textlist: false,
      poslist: false
    }), childrentree = ref$.childrentree, pos = ref$.pos, terminal = ref$.terminal;
    if (terminal != null) {
      output.push(terminal);
    }
    for (i$ = 0, len$ = childrentree.length; i$ < len$; ++i$) {
      child = childrentree[i$];
      for (j$ = 0, len1$ = (ref$ = listText(child)).length; j$ < len1$; ++j$) {
        terminal = ref$[j$];
        output.push(terminal);
      }
    }
    return output;
  };
}).call(this);
